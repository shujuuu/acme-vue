{
    "id": "OlPkIxBpyjiUdrHdvITO",
    "name": "<templates>",
    "dod": "",
    "description": "The template tag contains the componentâ€™s HTML markup.\nIt uses HTML-based syntax and allows us to declaritively bind the rendered DOM to the Vue instance data.\nIn this Unit we will go through the syntax and directive that goes inside the template.\n\nNote that the tags that start with `v-` are vuetify components, you can use regular HTML tags as well.",
    "summary": "",
    "hunksOrder": [
        "src/views/About.vue_0",
        "src/components/Navdrawer.vue_0",
        "src/components/Navdrawer.vue_1",
        "src/components/TreeView.vue_0"
    ],
    "tests": [],
    "hints": [],
    "play_mode": "walkthrough",
    "swimmPatch": {
        "src/components/Navdrawer.vue": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/src/components/Navdrawer.vue b/src/components/Navdrawer.vue\nindex 697ef59..697ef59 100644\n--- a/src/components/Navdrawer.vue\n+++ b/src/components/Navdrawer.vue",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Take a look at how we display the title with `{{ title }}`. This lets Vue know that the text we want to show is the value of the variable `title`. It is called \"in-template expression\"."
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -2,7 +2,6 @@",
                        "   <v-navigation-drawer permanent app>",
                        "     <v-list-item>",
                        "       <v-list-item-content>",
                        "-        <v-list-item-title class=\"title custom-class\">{{title}}</v-list-item-title>",
                        "         <v-list-item-subtitle> Learn how to swimm in Vue.js </v-list-item-subtitle>",
                        "       </v-list-item-content>",
                        "     </v-list-item>"
                    ]
                },
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "`v-for` is used for list rendering (loops).",
                            "Here we render the menu of the app, and each item will be shown with the icon that is set on the object.",
                            "When using `v-for`,  Vue will require to set a key, which is a unique identifier for each item."
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -9,11 +9,6 @@",
                        " ",
                        "     <v-divider></v-divider>",
                        " ",
                        "-    <v-list dense nav>",
                        "-      <v-list-item link v-for=\"item in menuItems\" :key=\"item.title\" :to=\"item.route\">",
                        "-        <v-list-item-icon>",
                        "-          <v-icon>{{ item.icon }}</v-icon>",
                        "-        </v-list-item-icon>",
                        " ",
                        "         <v-list-item-content>",
                        "           <v-list-item-title>{{ item.title }}</v-list-item-title>"
                    ]
                }
            ]
        },
        "src/components/TreeView.vue": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/src/components/TreeView.vue b/src/components/TreeView.vue\nindex 1645e94..1645e94 100644\n--- a/src/components/TreeView.vue\n+++ b/src/components/TreeView.vue",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "The `v-if` is used for conditional rendering. This means that the block will be rendered only if the directive's expression is true.",
                            "You can use the `v-else` directive to indicate what will be shown if the expression is false",
                            "The `v-else` must follow immediately after the `v-if` or the `v-else-if`.",
                            "In this case, if we in are read-only mode, we render the text as-is instead of an editable text field.",
                            "The `@click` also can be written as `v-on:click` and it allows us to listen to DOM event and trigger JS - In this case we are listening to click event of the trash icon that is appended to the text field.",
                            "`v-model` is used for 2-way binding. Here we bind the value of the item's name, whenever the value is changed from the text field, the parent component `TreeView` data will be updated.",
                            "`v-bind` or `:` is used to bind an HTML attribute (like class or style) to JS expressions. It is also used to pass props to child components. In this example, the Vuetify text field can receive a prop of and icon, and we pass it the trash icon. "
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -8,16 +8,6 @@",
                        "     </v-container>",
                        "     <v-treeview open-all :items=\"items\">",
                        "       <template slot=\"label\" slot-scope=\"{ item }\">",
                        "-        <v-text-field",
                        "-          v-if=\"!readOnly\"",
                        "-          class=\"text-field\"",
                        "-          v-model=\"item.name\"",
                        "-          @input=\"updateInput\"",
                        "-          :append-icon=\"`mdi-trash-can-outline`\"",
                        "-          @click:append=\"deleteItem(item.id)\"",
                        "-        >",
                        "-        </v-text-field>",
                        "-        <div v-else>{{ item.name }}</div>",
                        "       </template>",
                        "       <template v-if=\"!readOnly\" slot=\"prepend\" slot-scope=\"{ item }\">",
                        "         <v-tooltip bottom>"
                    ]
                }
            ]
        },
        "src/views/About.vue": {
            "diffType": "MODIFIED",
            "fileDiffHeader": "diff --git a/src/views/About.vue b/src/views/About.vue\nindex b6bc325..b6bc325 100644\n--- a/src/views/About.vue\n+++ b/src/views/About.vue",
            "hunks": [
                {
                    "swimmHunkMetadata": {
                        "hunkComments": [
                            "Inside the `<template></template>` tags you will structure the HTML and the component. ",
                            "Inside the tags there should be only 1 root element. Need another one? Wrap them with a `<div>`.",
                            "`<hello-world />` is a component we created and we use it inside the template of the app's `About` page."
                        ]
                    },
                    "hunkDiffLines": [
                        "@@ -1,11 +1,3 @@",
                        "-<template>",
                        "-  <v-container>",
                        "-    <h1>This is an about page</h1>",
                        "-    <h2>{{ aboutPage }}</h2>",
                        "-    <hello-world />",
                        "-  </v-container>",
                        "-</template>",
                        "-",
                        " <script>",
                        " import HelloWorld from \"@/components/HelloWorld.vue\";",
                        " "
                    ]
                }
            ]
        }
    },
    "app_version": "0.2.9",
    "file_version": "1.0.4",
    "last_commit_sha_for_swimm_patch": "b1128c1227959cc7a455e6eb5c3c897cfdb976de"
}
